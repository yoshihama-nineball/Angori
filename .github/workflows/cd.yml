name: Deploy

on:
  push:
    branches: [main, develop]

jobs:
  # デプロイ準備
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      target-branch: ${{ steps.env.outputs.target-branch }}
      is-production: ${{ steps.env.outputs.is-production }}

    steps:
    - id: env
      run: |
        TARGET_BRANCH="${{ github.ref_name }}"
        echo "target-branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
        echo "Target branch: $TARGET_BRANCH"
        
        if [[ "$TARGET_BRANCH" == "main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "is-production=true" >> $GITHUB_OUTPUT
          echo "Using production environment for main branch"
        else
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "is-production=false" >> $GITHUB_OUTPUT
          echo "Using development environment for $TARGET_BRANCH branch"
        fi

  # フロントエンドデプロイ (Vercel)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install dependencies
      working-directory: frontend
      run: yarn install --frozen-lockfile

    - name: Deploy to Vercel
      run: |
        cd frontend
        npx vercel --token ${{ secrets.VERCEL_TOKEN }} ${{ needs.setup.outputs.is-production == 'true' && '--prod' || '' }} --yes

  # バックエンドデプロイ (Render)
  deploy-backend:
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}

    steps:
    - name: Deploy to Render
      run: |
        if [[ "${{ needs.setup.outputs.is-production }}" == "true" ]]; then
          SERVICE_ID="${{ secrets.RENDER_SERVICE_ID_PROD }}"
          echo "Deploying to Production Render service"
        else
          SERVICE_ID="${{ secrets.RENDER_SERVICE_ID_DEVELOPMENT }}"
          echo "Deploying to Development Render service"
        fi

        echo "Service ID: $SERVICE_ID"
        
        response=$(curl -s -w "%{http_code}" -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/$SERVICE_ID/deploys")
        
        http_code="${response: -3}"
        if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
          echo "✅ Render deployment triggered successfully"
        else
          echo "❌ Render deployment failed with HTTP code: $http_code"
          echo "Response: ${response%???}"
          exit 1
        fi

  # ヘルスチェック
  verify:
    runs-on: ubuntu-latest
    needs: [setup, deploy-frontend, deploy-backend]

    steps:
    - name: Health check
      run: |
        if [[ "${{ needs.setup.outputs.is-production }}" == "true" ]]; then
          BACKEND_URL="https://angori-api-prod.onrender.com"
          echo "Checking Production API health"
        else
          BACKEND_URL="https://angori-api-development.onrender.com"
          echo "Checking Development API health"
        fi

        echo "Backend URL: $BACKEND_URL"
        
        # Wait for Render service to restart
        echo "Waiting for service to restart..."
        sleep 60
        
        # Health check with retry logic
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts"
          
          if curl -f -s "$BACKEND_URL/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
            break
          elif curl -f -s "$BACKEND_URL/up" > /dev/null 2>&1; then
            echo "✅ Health check passed (via /up endpoint)!"
            break
          else
            echo "❌ Health check failed, attempt $attempt/$max_attempts"
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ All health check attempts failed"
              exit 1
            fi
            sleep 30
            ((attempt++))
          fi
        done